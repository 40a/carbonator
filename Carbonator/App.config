<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <configSections>
    <section name="carbonator" type="Crypton.Carbonator.Config.CarbonatorSection, Crypton.Carbonator"/>
    <section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler, log4net"/>
  </configSections>
  
  <!--
    defaultCulture setting specifies which culture set will be used to find Performance Counters
      on non-English Windows installations, performance counter names will be in the localized language
      this setting may be necessary to use English names (e.g. Processor vs. Процессор (ru-RU))
  -->  
  <carbonator defaultCulture="en-US" logLevel="1" logType="eventlog" collectionInterval="1000" reportingInterval="5000">
    <!--
      logType: specifies which type of logging engine to use
          - eventlog: log to Windows Event log using Information/Warning/Error levels (this is the default)
          - log4net:  log to file using log4net (see below for configuration)
          - none:     disable logging
    -->
    
    <!--
      logLevel has been deprecated, but setting preserved for configuration compatibility reasons
    -->
    
    <!-- 
      maxMetricBufferSize:  tune maximum number of metrics that will be stored in Carbonator's memory before they are sent on
                            a different thread. If this buffer is full, no new metrics will be stored until it is cleared again
                            (this can happen if connection to the server is lost; metrics will keep piling up)
                            
                            Default is 21600 metrics (say 1 metric per second for 6 hours)
                            
                            Any value less than or equal to 0 will disable this limit (CAUTION: may lead to excessive memory usage
                            if connection to the graphite server is unreliable and you're collecting lots of metrics)     
      
      collectionInterval:   specifies how often Performance Counter values are collected in milliseconds
                            decreasing this value will increase metric accuracy at the cost of higher CPU usage by Carbonator
      
      reportingInterval:    specifies how often collected metrics in internal buffer are sent to the destination server, in milliseconds
    -->
    
    <!-- where graphite metrics will be sent -->
    
    <!-- optionally you may specify a prefix (e.g. API key for HostedGraphite)-->
    <!--<graphite server="my-graphite-server.example.org" port="2003" prefix="myPrefix" />-->
    
    <!-- 
      performance counters that will be collected 
      special variables:
      
        %HOST%  -  substitutes current computer name (Environment.MachineName)
        %host%  -  substitutes current computer name forced in lowercase
      
      New in v1.5:
      
        Strings are escaped for incompatible characters before carbon path is formed, characters are replaced with underscores (_)
      
        %COUNTER_CATEGORY%  - current counter category name
        %COUNTER_NAME%      - current counter name
        %COUNTER_INSTANCE%  - current counter instance (just underscore for counters without an instance)
      
        % ... %   - Any system environment variable, for example %PATH%, %OS%, for convenience
        
      Counter Watcher elements:
        path:       carbon/graphite metric path (see above)
        
        category:   performance counter category to load
        
        counter:    performance counter name
        
        instance:   (optional) performance counter instance name, or empty string
                    This attribute supports a regular expression, carbonator will load all instances matching
                    the regular expression when service starts      
      -->
    <output>
      <add name="default" type="graphite" server="my-graphite-server" port="2003"/>
      <add name="testing" type="influxdb" postingUrl="http://localhost:8086/write?db=mydb"/>
    </output>
    <counters>
      <add template="my.data.perf.%DOMAIN%.%HOST%.cpu.%COUNTER_INSTANCE%" category="Processor" counter="% Processor Time" instance="_Total"/>
      <add template="my.data.perf.%HOST%.memAvailable" category="Memory" counter="Available Bytes" instance=""/>
      <add template="my.data.perf.%HOST%.diskFree.%COUNTER_INSTANCE%" category="LogicalDisk" counter="% Free Space" instance=".+"/>
      <add template="disk-space,host=%HOST%,env=prod,disk=%COUNTER_INSTANCE%" category="LogicalDisk" counter="% Free Space" instance=".+"/>
    </counters>
  </carbonator>

  <!--
    Log4Net configuration if you want to use log4net logging
    Be sure to set logType="log4net" above!
  -->
  <log4net>
    <appender name="LogFileAppender" type="log4net.Appender.RollingFileAppender">
      <threshold value="ALL"/>
      <param name="File" value="carbonator.log"/>
      <param name="AppendToFile" value="true"/>
      <param name="encoding" value="utf-8"/>
      <param name="rollingStyle" value="Size"/>
      <param name="maximumFileSize" value="4MB"/>
      <param name="maxSizeRollBackups" value="4"/>
      <param name="PreserveLogFileNameExtension" value="true"/>
      <layout type="log4net.Layout.PatternLayout">
        <param name="ConversionPattern" value="%d{yyyy-MM-dd HH:mm:ss}[%t] %-5p %m%n"/>
      </layout>
    </appender>
    <appender name="ConsoleAppender" type="log4net.Appender.ConsoleAppender">
      <layout type="log4net.Layout.PatternLayout">
        <param name="Header" value="[Header]\r\n"/>
        <param name="Footer" value="[Footer]\r\n"/>
        <param name="ConversionPattern" value="%d [%t] %-5p %m%n"/>
      </layout>
    </appender>
    <root>
      <level value="INFO"/>
      <appender-ref ref="LogFileAppender"/>
      <appender-ref ref="ConsoleAppender"/>
    </root>
  </log4net>
  
<startup><supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5.1"/></startup></configuration>
